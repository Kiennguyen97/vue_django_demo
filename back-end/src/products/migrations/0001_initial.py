# Generated by Django 4.2 on 2023-04-26 23:06

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customers', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CartCoupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coupon_code', models.CharField(max_length=15)),
                ('name', models.CharField(max_length=50)),
                ('type', models.CharField(choices=[('PERCENT', 'Total Percentage Discount'), ('FIXED', 'Total Fixed Price Discount'), ('PRODUCT_PERC', 'Product Specific Percentage Discount'), ('PRODUCT_PRICE', 'Product Specific Price Discount')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('uuid', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('product_sku', models.CharField(max_length=20)),
                ('product_price', models.FloatField()),
                ('product_quantity', models.PositiveIntegerField()),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('product_sku_option', models.CharField(blank=True, max_length=40, null=True)),
            ],
            options={
                'ordering': ['create_date'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('uuid', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('title', ckeditor.fields.RichTextField(blank=True, max_length=255)),
                ('image_url', models.FileField(blank=True, null=True, upload_to='images/categories/')),
                ('meta_description', models.CharField(blank=True, max_length=250)),
                ('hide_on_web', models.BooleanField(default=False)),
                ('ordering', models.PositiveIntegerField(default=0)),
                ('resource', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_category_list', to='products.category')),
            ],
            options={
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='NZRegion',
            fields=[
                ('uuid', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('label', models.CharField(blank=True, max_length=200, null=True)),
                ('sku_addition', models.CharField(blank=True, max_length=100, null=True)),
                ('price_adjust', models.DecimalField(decimal_places=2, default=0, max_digits=7)),
                ('image', models.FileField(blank=True, null=True, upload_to='images/products/option/')),
                ('image_url', models.CharField(blank=True, max_length=1000, null=True)),
                ('sequence', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='OrderInvoice',
            fields=[
                ('uuid', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=36)),
                ('odoo_id', models.IntegerField(unique=True)),
                ('total_exc_gst', models.FloatField()),
                ('total_inc_gst', models.FloatField()),
                ('date_invoice', models.DateTimeField(null=True)),
                ('due_date', models.DateTimeField(null=True)),
                ('invoice_source', models.CharField(blank=True, max_length=100, null=True)),
                ('customer_po', models.CharField(default='', max_length=254)),
                ('payment_status', models.CharField(choices=[('PAID', 'Paid'), ('OPEN', 'Open'), ('OVERDUE', 'Overdue')], max_length=10)),
                ('pdf_url', models.CharField(blank=True, default='', max_length=256, null=True)),
                ('company_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='customers.company')),
                ('customer_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=256, unique=True)),
                ('sku', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True)),
                ('description_short', models.CharField(max_length=200, null=True)),
                ('description_long', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('meta_description', models.CharField(blank=True, max_length=350, null=True)),
                ('image_hover', models.FileField(blank=True, null=True, upload_to='images/products/')),
                ('website_template', models.CharField(blank=True, max_length=100, null=True)),
                ('list_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('active', models.BooleanField(default=True)),
                ('can_purchase', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_free_shipping', models.BooleanField(default=False)),
                ('delivery_timeframe', models.CharField(blank=True, max_length=45)),
                ('file_download_link', models.CharField(blank=True, max_length=100)),
                ('file_download_image', models.CharField(blank=True, max_length=100)),
                ('meta_keywords', models.CharField(blank=True, max_length=250, null=True)),
                ('ordering', models.PositiveIntegerField(default=0)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.category')),
            ],
            options={
                'ordering': ['-ordering'],
            },
        ),
        migrations.CreateModel(
            name='ProductOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_type', models.CharField(choices=[('COLOUR', 'Colour'), ('SIZE', 'Size'), ('SLAB_TOP', 'Slab Top'), ('BASIN', 'Basin'), ('EXTRUSION', 'Extrusion'), ('TAP_HOLE', 'Tap Hole'), ('COSMETIC_DRAWER', 'Cosmetic Drawer'), ('HANDLES', 'Handles'), ('OTHER', 'Other')], max_length=25)),
                ('option_name', models.CharField(help_text='friendly internal name to help identify the option set eg: VISTA COLOURS', max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('sequence', models.PositiveIntegerField(default=0)),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.product')),
            ],
            options={
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='StoreLocation',
            fields=[
                ('uuid', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256)),
                ('street', models.CharField(max_length=256)),
                ('suburb', models.CharField(blank=True, max_length=256, null=True)),
                ('district', models.CharField(max_length=256)),
                ('zip_code', models.CharField(blank=True, max_length=256, null=True)),
                ('phone_number', models.CharField(max_length=50)),
                ('logo', models.FileField(blank=True, null=True, upload_to='images/store_location/')),
                ('customer_emails', models.TextField(blank=True, null=True)),
                ('thank_link', models.CharField(blank=True, max_length=256, null=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_location_items', to='products.nzregion')),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('resource_url', models.FileField(blank=True, null=True, upload_to='assets/resource/')),
                ('sequence', models.PositiveIntegerField(default=0)),
                ('productresource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.productresource')),
            ],
            options={
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='ProductResourceRel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveIntegerField(default=0)),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('productresource', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.productresource')),
            ],
            options={
                'ordering': ['sequence'],
                'unique_together': {('product', 'productresource')},
            },
        ),
        migrations.CreateModel(
            name='ProductOptionRel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=200, null=True)),
                ('sequence', models.PositiveIntegerField(default=0)),
                ('required', models.BooleanField(default=False)),
                ('default_option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.option')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('productoption', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.productoption')),
            ],
            options={
                'ordering': ['sequence'],
                'unique_together': {('product', 'productoption')},
            },
        ),
        migrations.AddField(
            model_name='product',
            name='options',
            field=models.ManyToManyField(related_name='options_all', through='products.ProductOptionRel', to='products.productoption'),
        ),
        migrations.AddField(
            model_name='product',
            name='resources',
            field=models.ManyToManyField(related_name='resources_all', through='products.ProductResourceRel', to='products.productresource'),
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('uuid', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('product_price', models.FloatField()),
                ('product_quantity', models.PositiveIntegerField()),
                ('product_sku', models.CharField(max_length=100, null=True)),
                ('order_uuid', models.CharField(max_length=36)),
                ('sequence', models.PositiveIntegerField()),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='products.product')),
            ],
            options={
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='OrderInvoiceQuery',
            fields=[
                ('uuid', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('query_type', models.CharField(max_length=256, null=True)),
                ('query_message', models.TextField(null=True)),
                ('customer_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('order_invoice_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='products.orderinvoice')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('uuid', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('number', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('create_date', models.DateTimeField()),
                ('order_notes', models.TextField(blank=True, max_length=255, null=True)),
                ('payment_type', models.CharField(choices=[('c_d_card', 'Credit Card'), ('d_d', 'Direct Debit'), ('credit', 'Credit Account')], max_length=10)),
                ('shipping_cost', models.FloatField()),
                ('admin_fee', models.FloatField()),
                ('subtotal', models.FloatField()),
                ('order_tax', models.FloatField()),
                ('order_total', models.FloatField()),
                ('order_surcharge', models.FloatField()),
                ('purchase_order_ref', models.CharField(blank=True, max_length=254, null=True)),
                ('address_shipping_str', models.CharField(blank=True, max_length=350, null=True)),
                ('address_billing_str', models.CharField(blank=True, max_length=350, null=True)),
                ('odoo_is_imported', models.BooleanField(default=False)),
                ('coupon_value', models.FloatField(default=0)),
                ('customer_name', models.CharField(blank=True, max_length=254, null=True)),
                ('customer_email', models.CharField(blank=True, max_length=254, null=True)),
                ('customer_phone', models.CharField(blank=True, max_length=254, null=True)),
                ('address_billing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders_billing', to='customers.addresses')),
                ('address_shipping', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders_shipping', to='customers.addresses')),
                ('company_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='customers.company')),
                ('coupon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='products.cartcoupon')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('items', models.ManyToManyField(related_name='order', to='products.orderitem')),
                ('store_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.storelocation')),
            ],
            options={
                'ordering': ['-create_date'],
            },
        ),
        migrations.AddField(
            model_name='option',
            name='productoption',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.productoption'),
        ),
        migrations.CreateModel(
            name='GalleryProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(blank=True, null=True, upload_to='images/products/')),
                ('image_thumbnail', models.FileField(blank=True, null=True, upload_to='images/products/thumbnail/')),
                ('sequence', models.PositiveIntegerField(default=0)),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.product')),
            ],
            options={
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='CustomerCart',
            fields=[
                ('uuid', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CartItemOption',
            fields=[
                ('uuid', models.CharField(max_length=36, primary_key=True, serialize=False)),
                ('cart_item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cart_item_options', to='products.cartitem')),
                ('option', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.option')),
                ('productoption', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.productoption')),
            ],
        ),
        migrations.AddField(
            model_name='cartitem',
            name='cart',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='products.customercart'),
        ),
        migrations.AddField(
            model_name='cartitem',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='products.product'),
        ),
        migrations.CreateModel(
            name='CartCouponLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('coupon_id', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='coupon_lines', to='products.cartcoupon')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='products.product')),
            ],
        ),
        migrations.CreateModel(
            name='CartCouponInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coupon_code', models.CharField(max_length=15)),
                ('cart_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.customercart')),
                ('coupon_id', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='products.cartcoupon')),
            ],
        ),
        migrations.CreateModel(
            name='RelateProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveIntegerField(default=0)),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('relate_product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relate_item_all', to='products.product')),
            ],
            options={
                'ordering': ['sequence'],
                'unique_together': {('product', 'relate_product')},
            },
        ),
    ]
